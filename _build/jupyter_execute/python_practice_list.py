#!/usr/bin/env python
# coding: utf-8

# # リスト
# 
# ---
# 
# ## リストの作成
# 
# <br>
# 
# リストは、複数のデータを格納できる変数です。  
# 以下のように書くことでリストにデータを格納できます。
# 
# <br>
# 
# ```python
# 変数 = ['要素1', '要素2', '要素3']
# ```
# 
# <br>
# 
# 格納したい要素をカンマで区切り、全体を`[ ]`で囲みます。
# 要素は何個でも構いません。　
# 
# <br>
# 
# 以下のようなリストを作成してみます。

# In[1]:


a = ['TP53', 'EGFR', 'MYC', 'CDKN1A']
print(a)


# 作成したリストが表示されます。
# 

# ---
# 
# ## リストから要素を取り出す
# 
# リストから特定の要素を取り出す時は、リストの変数名の横にインデックスをつけます(`[ ]`をつけて、その中に順番を記入)。
# 
# 文字列の処理の時と同様、インデックスは**1番目は0**です。以降、2番目は1、3番目は2と続きます。

# In[2]:


b = a[0]
print(b)


# リストの一番目の要素である`TP53`が表示されます。
# 
# <br>
# 
# **マイナスの数値**を入れると、後ろから数えた順番の要素を取り出せます。

# In[3]:


c = a[-1]
print(c)


# **コロン**を使って、複数の要素を取り出すこともできます(スライス）。

# In[4]:


d = a[1: 3]
print(d)


# 終点で指定した順番の一つ前までの要素が表示されます。  
# 文字列の場合と一緒です。

# 最初の要素から取り出す場合は始点を省略できます。  
# 最後の要素まで取り出す場合は終点を省略できます。  
# この点は文字列のスライスと同様です。  

# In[5]:


e = a[: 2]
print(e)


# 最初と2番目の要素を取得できました。

# In[6]:


f = a[2:]
print(f)


# ３番目から最後までの要素を取得できました。

# <br>
# 
# **存在しないインデックスを指定するとエラーになります**ので注意してください。  
# エラーが存在すると、その部分でプログラムは止まってしまい、最後まで実行されません。

# In[7]:


print(a[4])


# エラーメッセージが表示されます。  
# `list index out of range`とエラーの理由をちゃんと教えてくれます。

# ---
# 
# ## 要素を変更する
# 
# リストの中の要素を別のものに置き換えたい時は、置き換えたい要素をスライスで指定して、代入演算子`=`で新しい要素を代入します。

# In[8]:


a[3] = 'KRAS'
print(a)


# リストの4番目の要素が、`CDKN1A`から`KRAS`に置き換わりました。

# ---
# 
# ## 要素を追加する
# 
# リストに要素を追加したいときには、リスト型のメソッド（リスト型のデータを処理する関数）である`append()`を使います。
# 
# カッコの中に追加したい要素を入力します。
# 
# 使い方は、処理をしたい変数とメソッドを`.`で繋ぎます。

# In[9]:


a.append('RB')
print(a)


# リスト`a`に、新しい要素`RB`が追加されました。

# ---
# 
# ## タプル
# 
# タプルはリストと似ていますが、内容を変更できません。
# リストでは`[ ]`で囲みましたが、タプルでは`( )`で囲みます。

# In[10]:


a = ('TP53', 'EGFR', 'MYC', 'CDKN1A')
print(a)
print(a[0])


# In[11]:


a[0] = 'ACTB'


# 中身は変更できませんのでエラーになります。
