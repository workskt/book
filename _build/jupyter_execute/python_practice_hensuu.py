#!/usr/bin/env python
# coding: utf-8

# # 変数
# 
# <br>
# 
# ある変数を定義して、それに文字や数値を代入させることができます。
# 
# <br>
# 
# ```python
# 変数名　= 値
# ```
# 
# <br>

# In[1]:


a = 10
print(a)


# ``a``という変数に、``10``という数値を代入しました。  
# ``print()``はカッコ内の変数や文字等を表示させる関数です。  
# ``print(a)``という命令により、``10``が出力されました。
# 
# <br>

# In[2]:


b = 'TP53'
print(b)


# ``TP53``と表示されました。  
# 文字列を扱う場合は、文字列を**シングルクォーテーション**もしくは**ダブルクォーテーション**で囲みます。  
# 囲まないと、TP53という変数を意味することになってしまいます。
# 
# <br>

# In[3]:


c = TP53
print(c)


# ``c``に``TP53``を代入し、``c``を表示する命令をしていますが、  
# ``TP53``はクォーテーションで囲まれていないため、変数として扱われます。  
# しかし、変数``TP53``は定義されていませんので、エラーが出力されます。  
# 
# <br>
# 
# ---
# 
# 文字列と数値は異なる型として扱われます。  
# 型を調べるには`type()`関数を使用します。
# 

# In[ ]:


type(a)


# In[ ]:


type(b)


# `int`は**整数**、`str`は**文字列**です。  
# 型によって取り扱い方が異なってくるため、変数を扱う場合には、常に型を意識しておく必要があります。  
# 
# 例えば、二つの変数を`+`で処理した場合、数値では足し算をしてくれますが、文字列では二つの文字列をつなげる処理になります。

# In[ ]:


a = 1
b = 2
print(a + b)


# `a`と`b`は整数なので、足し算をした`3`が出力されます。
# 
# <br>

# In[ ]:


a = '1'
b = '2'
print(a + b)


# `a`と`b`は文字列なので、二つの文字列をつなげた`12`が出力されます。
# 
# <br>
# 
# 文字列の型を持っている数字を、整数に変換する場合は、`int()`を使います。

# In[ ]:


a = '1'
b = '2'
print('文字列', a + b)
print('整数', int(a) + int(b))


# **小数**の場合は`float`という型になります。

# In[ ]:


a = 1.005
print(type(a))


# 小数に変換する場合は`float()`関数を使用します。

# In[ ]:


a = '1.005'
print(a, type(a))

b = float(a)
print(b, type(b))


# `int()`は整数に変換する関数なので、小数と思われる文字列を整数に変換しようとするとエラーになります。

# In[ ]:


a = '1.005'
b = int(a)


# 小数に`int()`を使うと、整数に変換されます。

# In[ ]:


a = 1.005
b = int(a)
print(b)


# 文字列と数値をつなげようとすると、型が異なるのでエラーとなります。

# In[ ]:


a = 'TP'
b = 53
print(a + b)


# `str()`関数で文字列に変換するとつなげることができます。

# In[ ]:


a = 'TP'
b = 53
print(a + str(b))

