#!/usr/bin/env python
# coding: utf-8

# # 7. リスト内包表記
# 
# ---
# 
# **for文**などの繰り返し処理を行う場合に、リスト内包表記というものがあります。  
# 以下のように書きます。  
# 
# <br>
# 
# ```python
# [処理式 for　変数 in イテラブル ]
# ```
# 
# <br>
# 
# イテラブルとは繰り返し処理が可能なオブジェクトのことです。  
# リストや辞書、文字列などが該当します。  
# 
# 通常の**for文**よりも短く書ける、処理時間が速いというメリットがありますので、  
# 簡単な処理であればリスト内表記を使うようにしましょう。
# 

# In[1]:


a = [1, 5, 10, 15, 20]
b = [v for v in a]
print(b)


# `for v in a`の部分は通常の**for文**と同じです（最後のコロンがない点を除き）。  
# 一つ目の`v`は、**for文**でリスト`a`から繰り返し取り出される二つ目の`v`を受け取ります。  
# 処理式の部分は`v`だけですので、取り出された二つ目の`v`をそのまま一つ目の`v`が受け取り、リスト`b`に渡しています。  
# 
# 処理式の部分を以下のように変えてみましょう。  

# In[2]:


a = [1, 5, 10, 15, 20]
b = [v * 2 for v in a]
print(b)


# リスト`a`から取り出した要素を、2倍にしてリスト`b`に渡しました。

# **for文**部分の後ろに**if文**を持ってくることもできます。  
# これにより、イテラブルの中で条件に該当するものだけ取り出す処理を、1行で書くことができます。  

# In[3]:


a = [1, 5, 10, 15, 20]
b = [v for v in a if v % 2 == 0]
print(b)


# `%`は指定した数値で割った余りを返す演算子です。  
# `if v % 2 == 0`は、`v`を`2`で割った余りが`0`になる場合だけ、`v`の値を返すことを意味します。  
# 実際、リスト`b`には偶数の数値だけ渡されました。  

# In[4]:


a = 'tumor protein p53'
b = [v for v in a if v == 'o']
print(b)

